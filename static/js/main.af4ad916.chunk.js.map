{"version":3,"sources":["reducers/bookReducer.js","contexts/BookContext.js","components/Navbar.js","components/BookDetails.js","components/BookList.js","components/BookForm.js","App.js","serviceWorker.js","index.js"],"names":["bookReducer","state","action","type","title","book","author","id","v4","filter","BookContext","createContext","BookContextProvider","props","useReducer","localData","localStorage","getItem","JSON","parse","books","dispatch","useEffect","setItem","stringify","Provider","value","children","Navbar","useContext","className","length","BookDetails","onClick","BookList","map","key","NewBookForm","useState","setTitle","setAuthor","onSubmit","e","preventDefault","placeholder","onChange","target","required","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mMAEaA,EAAc,SAACC,EAAOC,GACjC,OAAQA,EAAOC,MACb,IAAK,WACH,MAAM,GAAN,mBACKF,GADL,CAEE,CACEG,MAAOF,EAAOG,KAAKD,MACnBE,OAAQJ,EAAOG,KAAKC,OACpBC,GAAIC,iBAGV,IAAK,cACH,OAAOP,EAAMQ,QAAO,SAACJ,GAAD,OAAUA,EAAKE,KAAOL,EAAOK,MACnD,QACE,OAAON,ICdAS,EAAcC,0BAEdC,EAAsB,SAACC,GAAW,IAAD,EAClBC,qBAAWd,EAAa,IAAI,WACpD,IAAMe,EAAYC,aAAaC,QAAQ,SACvC,OAAOF,EAAYG,KAAKC,MAAMJ,GAAa,MAHD,mBACrCK,EADqC,KAC9BC,EAD8B,KAQ5C,OAHAC,qBAAU,WACRN,aAAaO,QAAQ,QAASL,KAAKM,UAAUJ,MAC5C,CAACA,IAEF,kBAACV,EAAYe,SAAb,CAAsBC,MAAO,CAAEN,QAAOC,aACnCR,EAAMc,WCXAC,EAAS,WAAO,IACnBR,EAAUS,qBAAWnB,GAArBU,MACR,OACE,yBAAKU,UAAU,UACb,kDACA,iDAAuBV,EAAMW,OAA7B,8BCLOC,EAAc,SAAC,GAAc,IAAZ3B,EAAW,EAAXA,KACpBgB,EAAaQ,qBAAWnB,GAAxBW,SACR,OACE,wBAAIY,QAAS,kBAAMZ,EAAS,CAAElB,KAAM,cAAeI,GAAIF,EAAKE,OAC1D,yBAAKuB,UAAU,SAASzB,EAAKD,OAC7B,yBAAK0B,UAAU,UAAUzB,EAAKC,UCLvB4B,EAAW,WAAO,IACrBd,EAAUS,qBAAWnB,GAArBU,MACR,OAAOA,EAAMW,OACX,yBAAKD,UAAU,aACb,4BACGV,EAAMe,KAAI,SAAC9B,GACV,OAAO,kBAAC,EAAD,CAAaA,KAAMA,EAAM+B,IAAK/B,EAAKE,UAKhD,yBAAKuB,UAAU,SAAf,0CCXSO,EAAc,WAAO,IACxBhB,EAAaQ,qBAAWnB,GAAxBW,SADuB,EAELiB,mBAAS,IAFJ,mBAExBlC,EAFwB,KAEjBmC,EAFiB,OAGHD,mBAAS,IAHN,mBAGxBhC,EAHwB,KAGhBkC,EAHgB,KAU/B,OACE,0BAAMC,SAPa,SAACC,GACpBA,EAAEC,iBACFtB,EAAS,CAAElB,KAAM,WAAYE,KAAM,CAAED,QAAOE,YAC5CiC,EAAS,IACTC,EAAU,MAIR,2BACErC,KAAK,OACLyC,YAAY,aACZlB,MAAOtB,EACPyC,SAAU,SAACH,GAAD,OAAOH,EAASG,EAAEI,OAAOpB,QACnCqB,UAAQ,IAEV,2BACE5C,KAAK,OACLyC,YAAY,SACZlB,MAAOpB,EACPuC,SAAU,SAACH,GAAD,OAAOF,EAAUE,EAAEI,OAAOpB,QACpCqB,UAAQ,IAEV,2BAAO5C,KAAK,SAASuB,MAAM,eCZlBsB,MAZf,WACE,OACE,yBAAKlB,UAAU,OACb,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCCYmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.af4ad916.chunk.js","sourcesContent":["import { v4 } from \"uuid\";\r\n\r\nexport const bookReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"ADD_BOOK\":\r\n      return [\r\n        ...state,\r\n        {\r\n          title: action.book.title,\r\n          author: action.book.author,\r\n          id: v4(),\r\n        },\r\n      ];\r\n    case \"REMOVE_BOOK\":\r\n      return state.filter((book) => book.id !== action.id);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React, { createContext, useReducer, useEffect } from \"react\";\r\nimport { bookReducer } from \"../reducers/bookReducer\";\r\nexport const BookContext = createContext();\r\n\r\nexport const BookContextProvider = (props) => {\r\n  const [books, dispatch] = useReducer(bookReducer, [], () => {\r\n    const localData = localStorage.getItem(\"books\");\r\n    return localData ? JSON.parse(localData) : [];\r\n  });\r\n  useEffect(() => {\r\n    localStorage.setItem(\"books\", JSON.stringify(books));\r\n  }, [books]);\r\n  return (\r\n    <BookContext.Provider value={{ books, dispatch }}>\r\n      {props.children}\r\n    </BookContext.Provider>\r\n  );\r\n};\r\n\r\n//  { title: \"name of the wind\", author: \"patrick rothfuss\", id: 1 },\r\n//     { title: \"the final empire\", author: \"brandon sanderson\", id: 2 },\r\n// const addBook = (title, author) => {\r\n//     setBooks([...books, { title, author, id: v4() }]);\r\n//   };\r\n//   const removeBook = (id) => {\r\n//     setBooks(books.filter((book) => book.id !== id));\r\n//   };\r\n","import React, { useContext } from \"react\";\r\nimport { BookContext } from \"../contexts/BookContext\";\r\n\r\nexport const Navbar = () => {\r\n  const { books } = useContext(BookContext);\r\n  return (\r\n    <div className=\"navbar\">\r\n      <h1>Ninja Reading List</h1>\r\n      <p>Currently you have {books.length} books to get through...</p>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport { BookContext } from \"../contexts/BookContext\";\r\n\r\nexport const BookDetails = ({ book }) => {\r\n  const { dispatch } = useContext(BookContext);\r\n  return (\r\n    <li onClick={() => dispatch({ type: \"REMOVE_BOOK\", id: book.id })}>\r\n      <div className=\"title\">{book.title}</div>\r\n      <div className=\"author\">{book.author}</div>\r\n    </li>\r\n  );\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport { BookContext } from \"../contexts/BookContext\";\r\nimport { BookDetails } from \"../components/BookDetails\";\r\nexport const BookList = () => {\r\n  const { books } = useContext(BookContext);\r\n  return books.length ? (\r\n    <div className=\"book-list\">\r\n      <ul>\r\n        {books.map((book) => {\r\n          return <BookDetails book={book} key={book.id} />;\r\n        })}\r\n      </ul>\r\n    </div>\r\n  ) : (\r\n    <div className=\"empty\">No books to read. Hello, free time :)</div>\r\n  );\r\n};\r\n","import React, { useContext, useState } from \"react\";\r\nimport { BookContext } from \"../contexts/BookContext\";\r\n\r\nexport const NewBookForm = () => {\r\n  const { dispatch } = useContext(BookContext);\r\n  const [title, setTitle] = useState(\"\");\r\n  const [author, setAuthor] = useState(\"\");\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    dispatch({ type: \"ADD_BOOK\", book: { title, author } });\r\n    setTitle(\"\");\r\n    setAuthor(\"\");\r\n  };\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"book title\"\r\n        value={title}\r\n        onChange={(e) => setTitle(e.target.value)}\r\n        required\r\n      />\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"author\"\r\n        value={author}\r\n        onChange={(e) => setAuthor(e.target.value)}\r\n        required\r\n      />\r\n      <input type=\"submit\" value=\"add book\" />\r\n    </form>\r\n  );\r\n};\r\n","import React from \"react\";\nimport { Navbar } from \"./components/Navbar\";\nimport { BookContextProvider } from \"./contexts/BookContext\";\nimport { BookList } from \"./components/BookList\";\nimport { NewBookForm } from \"./components/BookForm\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BookContextProvider>\n        <Navbar />\n        <BookList />\n        <NewBookForm />\n      </BookContextProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}